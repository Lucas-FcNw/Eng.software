LINKS ÚTEIS:
GitLab:  https://mackcloud.mackenzie.br/gitlab
Teams: https://teams.microsoft.com/l/team/19%3AyzaIjkVr1xSbywy4n2OPk4__r7Wma2EXSsAB2bVO3Ro1%40thread.tacv2/conversations?groupId=a922cf92-e179-4b64-9509-5f5e143078cc&tenantId=51da9440-4e5e-47b3-8e5c-4817f6f43c04



Aula 28 de fevereiro ------ Eng de Requisitos

Definição: Uma capacidade de um software atender as necessidades do cliente de resolver um problema e atingir seu objetivo.

Requisitos:  Levantar REQUISITOS de um software que permita a construção de um sistema que atneda as NECESSIDADES do CLIENTE e, assim, resolva seu PROBLEMA.

Blueprint/ Pirâmide de requisitos:  Modelar de forma simples e ampla o processo de elicitação(decobrir requisitos) de requisitos para enender como abordamos diferentes aspectos do processo.

  REQUISITOS:::
Condições para desenvolvimento -- O software é a SOLUÇÃO do seu PROBLEMA, é a SOLUÇÃO para ganhar vantagem competitiva.

Para produzirmo uma SOLUÇÂO, precisamos antes, entender o PROBLEMA e as NECESSIDADES do Clinete.
Um problema pode ter várias alternativas de SOLUÇÂO, para o cliente poder escolher ele precisa conhecer as CARACTERÍSTICAS de cada SOLUÇÃO.

Para o desenvolvedor poder produzir a SOLUÇÃO do clinete, ele deve atender a um conjunto de REQUISITOS da SOLUÇÃO.


Falhas comuns são: falta de retorno do usuário, requisitos e especificações incompletas, mudança nos requisitos e especificações.

A Engenharia de Requisitos é essencial para construirmos uma SOLUÇÃO que atenda às NECESSIDADES do Cliente e resolva o seu PROBLEMA dentro do Custo, Tempo e Escopo estabelecidos em contrato.

No arquivo a partir da pagina 12 é referente ao projeto.  

Aula 10 de março ------ Uso do Gitlab   Escopo de Requisito

Escopo = Soma dos produtos, serviços e resultados fornecidos.

Escopo de produto = caracteristicas e funções que descrevem um produto, serviço ou resultado com suas caracteristricas e funções especificadas.

Escopo de projeto = trabalho que deve ser realizado para entregar um produto, serviço ou resultado com as características e funções especificadas.


          REQUISITOS

Pode ser uma declaração abstrata de alto nível ou restrição de sistema.
Servem a diversas funções:
- Base para proposta de contrato, tendo alto nível de abstração gera abertura para interpretações.
- Base de um contrato em si, o qual é definido em detalhe.


Para a coleta de requisitos se tem inumeras formas diferentes, mas o objetivo é evitar o Tire Swing Cartoon.


                     TIPOS DE REQUISITOS
Em suma há 2, de usuário e de sistema.

Requisitos de usuário:
- Declarações em linguagem natural mais diagramas de serviços que o sistema fornece e suas restrições operacionais. Escritos para o usuário.

Requisitos de sistema:
- Documento estruturado estabelecendo descrições detalhadas das funções, serviços e restrições operacionais do sistema. Define o que deve ser implementado e assim, pode ser parte de um contrato entre o cliente e o desenvolvedor


Requisito Funcional:
É em suma o que o sistema precisa realizar. “As capacidades do produto ou coisas que um produto deve fazer para seus usuários”.
- Devem incluir descrições de toods os recursos requeridos.
- Não deve haver conflitos ou contradições nas descrições dos recursos do sistema.

Descrevem a funcionalidade ou sevriços do sistema:
- Dependem do tipo do Software, dos usuários esperados, o tipo de sistema que o software é usado.
- Requisitos funcionais de usuários podem ser declarações de alto nível do que o sistema deve fazer.
- Para todo pedido deve ser alocado um identificador único que o usuário deve ser capaz de copiar para a área de armazenamento permanente da sua conta.



Requisitos não funcionais:

 

=
































The View 4 + 1 aula mais importante.


Precisa de uma visão lógica, de desenvolvimento, processo e fisico, os 4 cenários mais importantes.



Lógica:
Diagrama de Classes, objetos e Estados.

Visão de implementação:
Diagrama de componentes, pacotes.

Visão de Processo:
Diagrama de sequência, comunicação, atividades.

Visão física:
Diagrama de implantação.

Visão de cenários:
Casos de uso e história do usuários.


Caso de uso é a representação das funcionalidades do ponto de vista externo. A partir dos casos de uso que modelamos os requisitos funcionais do usuário.
Representa quem faz e o que faz.

Caso de extende pode rolar ou não, o include é obrigatório.

Modelos de classes tem detalhes adicionados a medida que se entende o problema e desenvolve o projeto, principalmente em diagrama de dominio.











